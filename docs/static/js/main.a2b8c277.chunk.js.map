{"version":3,"sources":["useEmail.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["localStorageKey","App","useState","email","setEmail","useEffect","localStorageEmail","localStorage","getItem","useCallback","nextEmail","setItem","useEmail","Date","now","timestamp","setTimestamp","showNotif","setShowNotif","useClippy","setClipboard","emailRef","useRef","timer","onChangeEmail","event","target","value","onClickGenerateTimestamp","setTimeout","current","clearTimeout","timestampWithPrefix","includes","generetedEmail","replace","className","onChange","placeholder","style","paddingTop","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAGMA,EAAkB,Q,iBCEjB,SAASC,IAAO,IAAD,EDAf,WAAqB,IAAD,EACCC,mBAAS,IADV,mBAClBC,EADkB,KACXC,EADW,KAgBzB,OAbAC,qBAAU,WACR,IAAMC,EAAoBC,aAAaC,QAAQR,GAE3CM,GACFF,EAASE,KAEV,IAOI,CAACH,EALyBM,uBAAY,SAACC,GAC5CH,aAAaI,QAAQX,EAAiBU,GACtCN,EAASM,KACR,KCbuBE,GADN,mBACbT,EADa,KACNC,EADM,OAEcF,mBAASW,KAAKC,OAF5B,mBAEbC,EAFa,KAEFC,EAFE,OAGcd,oBAAS,GAHvB,mBAGbe,EAHa,KAGFC,EAHE,OAIKC,MAAhBC,EAJW,oBAMdC,EAAWC,iBAAO,IAClBC,EAAQD,mBAERE,EAAgBf,uBACpB,SAACgB,GACCrB,EAASqB,EAAMC,OAAOC,SAExB,CAACvB,IAGGwB,EAA2BnB,uBAAY,WAC3CO,EAAaH,KAAKC,OAElBe,YAAW,WACTT,EAAaC,EAASS,WACrB,IACHZ,GAAa,GAETK,EAAMO,SACRC,aAAaR,EAAMO,SAGrBP,EAAMO,QAAUD,YAAW,WACzBX,GAAa,KACZ,OACF,CAACE,IAEEY,EAAsB7B,EAAM8B,SAAS,KAAf,WACpBlB,GADoB,WAEpBA,GACFmB,EAAiB/B,EAAMgC,QAC3B,cADqB,YAEhBH,EAFgB,QAOvB,OAFAX,EAASS,QAAUI,EAGjB,qBAAKE,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,uBAAOT,MAAOxB,EAAOkC,SAAUb,EAAec,YAAY,UAC1D,qBACEC,MAAO,CAAEC,WAAY,IACrBC,QAASb,EACTQ,UAAU,kBAHZ,SAKE,+BACE,8BAAMF,QAGV,qBAAKE,UAAS,gBAAWnB,EAAY,UAAY,IAAjD,2BC3DR,IAYeyB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a2b8c277.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { EmitHelperUniqueNameCallback } from 'typescript';\n\nconst localStorageKey = 'email';\n\nexport function useEmail() {\n  const [email, setEmail] = useState('');\n\n  useEffect(() => {\n    const localStorageEmail = localStorage.getItem(localStorageKey);\n\n    if (localStorageEmail) {\n      setEmail(localStorageEmail);\n    }\n  }, []);\n\n  const setEmailAndSaveToStorage = useCallback((nextEmail: string) => {\n    localStorage.setItem(localStorageKey, nextEmail);\n    setEmail(nextEmail);\n  }, []);\n\n  return [email, setEmailAndSaveToStorage] as [\n    typeof email,\n    typeof setEmailAndSaveToStorage\n  ];\n}\n","import useClippy from 'use-clippy';\nimport React, { useCallback, useRef, useState } from 'react';\nimport { useEmail } from './useEmail';\nimport './App.css';\n\nexport function App() {\n  const [email, setEmail] = useEmail();\n  const [timestamp, setTimestamp] = useState(Date.now());\n  const [showNotif, setShowNotif] = useState(false);\n  const [, setClipboard] = useClippy();\n  \n  const emailRef = useRef('');\n  const timer = useRef<ReturnType<typeof setTimeout>>();\n\n  const onChangeEmail = useCallback(\n    (event) => {\n      setEmail(event.target.value);\n    },\n    [setEmail]\n  );\n\n  const onClickGenerateTimestamp = useCallback(() => {\n    setTimestamp(Date.now());\n    \n    setTimeout(() => {\n      setClipboard(emailRef.current);\n    }, 10);\n    setShowNotif(true);\n\n    if (timer.current) {\n      clearTimeout(timer.current);\n    }\n    \n    timer.current = setTimeout(() => {\n      setShowNotif(false);\n    }, 5000);\n  }, [setClipboard]);\n\n  const timestampWithPrefix = email.includes('+')\n    ? `-${timestamp}`\n    : `+${timestamp}`;\n  const generetedEmail = email.replace(\n    /(.*?)@(.*?)/,\n    `$1${timestampWithPrefix}@$2`\n  );\n\n  emailRef.current = generetedEmail;\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <input value={email} onChange={onChangeEmail} placeholder=\"email\" />\n        <div\n          style={{ paddingTop: 40 }}\n          onClick={onClickGenerateTimestamp}\n          className=\"generated-email\"\n        >\n          <code>\n            <pre>{generetedEmail}</pre>\n          </code>\n        </div>\n        <div className={`notif ${showNotif ? 'visible' : ''}`}>Copied !</div>\n      </header>\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}